{"version":3,"sources":["boardContext.tsx","sudokusolver.tsx","displayBoard.tsx","App.tsx","store.ts","index.tsx"],"names":["slice","createSlice","name","initialState","board","reducers","changeBoard","state","selectBoard","actions","app","solveSudoku","temp","solve","theBoard","currentPosition","row","column","findEmpty","i","currentValue","toString","validate","y","x","cellValue","position","boxRow","Math","floor","boxCol","j","DisplayBoard","useState","setState","useSelector","className","displayBoardRows","push","map","value","Button","variant","displayColumn","visualRepresentation","onClick","App","store","configureStore","reducer","appReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c9220f1.chunk.js","sourcesContent":["import { createSlice} from '@reduxjs/toolkit';\nimport {RootState} from \"./store\";\n\ninterface AppState {\n    board:string[][];\n};\n\nconst initialState: AppState = {\n    board: [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n        [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n        [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]],\n};\n\nexport const slice = createSlice({\n    name: 'app',\n    initialState,\n    reducers: {\n        changeBoard: state => {\n\n        },\n    }\n});\n\nexport const { changeBoard } = slice.actions;\n\nexport const selectBoard = (state: RootState) => state.app.board;\n\nexport default slice.reducer;\n","/**\n * Solving the board we have entered\n * @param board is the 3 dimensional array of input values\n */\n\nexport function solveSudoku(board:any) {\n    let temp = board;\n    solve(temp);\n    return temp;\n};\n\n/**\n * Validates the value of the current cell we're sitting in\n * @param cellValue The current value of the cell\n * @param position Where are we in the grid\n * @param theBoard The values of the entire board\n */\nfunction validate(cellValue:string, position:number[], theBoard:number[][]){\n    const [row, column] = position;\n\n    // Checking the Row we're in\n    for(let i = 0; i < 9; i++) {\n        if(theBoard[i][column].toString() === cellValue && i !== row) {\n            return false;\n        }\n    }\n\n    // Checking the column we're in\n    for(let i = 0; i < 9; i++) {\n        if(theBoard[row][i].toString() === cellValue && i !== column) {\n            return false;\n        }\n    }\n\n    // Lets Check the 3x3 square we're in\n    const boxRow = Math.floor(row / 3) * 3;\n    const boxCol = Math.floor(column / 3) * 3;\n    for(let i = boxRow; i < boxRow + 3; i++) {\n        for(let j = boxCol; j < boxCol + 3; j++) {\n            if(theBoard[i][j].toString() === cellValue && i !== row && j !== column) {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n\n/**\n * Find the first empty cell\n * @param theBoard\n */\nfunction findEmpty (theBoard:[][]) {\n    for(let row = 0; row < 9; row++) {\n        for(let column = 0; column < 9; column++) {\n            if(theBoard[row][column] === '.') {\n                return [row, column]\n            }\n        }\n    }\n    return null\n}\n\n/**\n * Solve the sudoku board\n * @param board 3 dimensional array representing the board\n */\nfunction solve (theBoard:any) {\n    const currentPosition = findEmpty(theBoard);\n    //If board is full/non existent let us break out\n    if(currentPosition === null) {\n        return true\n    }\n\n    //loop through 9 since sudoku is 9*9\n    for(let i = 1; i <= 9; i++) {\n        const currentValue = i.toString();\n\n        if( validate(currentValue, currentPosition, theBoard) ) {\n            const [y, x] = currentPosition;\n            theBoard[y][x] = currentValue;\n\n            if(solve(theBoard)) {\n                return true\n            }\n\n            theBoard[y][x] = '.'\n        }\n    }\n    return false\n}","import React, {useState} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {selectBoard} from \"./boardContext\";\nimport {solveSudoku} from \"./sudokusolver\";\nimport {Button} from \"@material-ui/core\";\n\n\nexport function DisplayBoard() {\n    const [state, setState] = useState(0);\n    const board = useSelector(selectBoard);\n\n    return(\n        <>\n            <h1 className={\"title\"}>Sudoku Solver</h1>\n            {visualRepresentation(board)}\n            <button onClick={solve} >Submit</button>\n        </>\n    );\n\n    function solve() {\n        let temp = solveSudoku(board);\n        setState(temp);\n    }\n}\n\nfunction visualRepresentation(theBoard:any) {\n    let displayBoardRows = [];\n\n    for(let i = 0; i<9; i++) {\n        displayBoardRows.push(theBoard[i].map((value: any) => <Button variant={\"outlined\"} className={\"item\"}>{value}</Button>));\n    }\n\n    let displayColumn = [];\n    displayColumn.push(displayBoardRows.map((value:any) => <div className={\"row\"}>{value}</div>));\n\n    return (\n        <div className={\"container\"}>\n            {displayColumn}\n        </div>\n    );\n}\n\nexport default DisplayBoard;","import React from 'react';\nimport './App.css';\nimport DisplayBoard from \"./displayBoard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <DisplayBoard />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import {configureStore, ThunkAction, Action} from \"@reduxjs/toolkit\";\nimport appReducer from \"./boardContext\";\n\n\nexport const store = configureStore({\n    reducer: {\n        app: appReducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport App from './App';\nimport {store} from \"./store\";\n\nReactDOM.render(\n      <Provider store={store}>\n        <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}